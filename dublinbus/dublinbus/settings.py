"""
Django settings for dublinbus project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "main/static"),
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if os.getenv("SECRET_KEY"):
    SECRET_KEY = os.environ["SECRET_KEY"]
else:
    SECRET_KEY = "django-insecure-1)#fo!fd3$fvtg+#7bo-0r_f4#!5_)zp2mtezez&eat@27okx="

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv("DEBUG_VALUE"):
    DEBUG = os.environ["DEBUG_VALUE"]
else:
    DEBUG = True

if os.getenv("ALLOWED_HOST"):
    ALLOWED_HOSTS = [os.environ["ALLOWED_HOST"]]
else:
    ALLOWED_HOSTS = ["127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main.apps.MainConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "dublinbus.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "dublinbus.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# function to retrieve values from production or development database variables needed to establish the connection
def get_database_env_variables(production_variable, development_variable):
    if os.getenv(production_variable, ""):
        return os.environ[production_variable]
    elif os.getenv(development_variable, ""):
        return os.environ[development_variable]
    else:
        # this will raise an exception if the env variables are not created
        raise Exception(
            f"Could not find {production_variable} or {development_variable}"
        )


database_name = "dublin_bus"
database_user = get_database_env_variables(
    "PRODUCTION_DATABASE_USER", "DEVELOPMENT_DATABASE_USER"
)
database_password = get_database_env_variables(
    "PRODUCTION_DATABASE_PASSWORD", "DEVELOPMENT_DATABASE_PASSWORD"
)
database_host = get_database_env_variables(
    "PRODUCTION_DATABASE_HOST", "DEVELOPMENT_DATABASE_HOST"
)
database_port = get_database_env_variables(
    "PRODUCTION_DATABASE_PORT", "DEVELOPMENT_DATABASE_PORT"
)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": database_name,
        "USER": database_user,
        "PASSWORD": database_password,
        "HOST": database_host,
        "PORT": database_port,
        "OPTIONS": {"init_command": "SET sql_mode='STRICT_ALL_TABLES'"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-ie"

TIME_ZONE = "Europe/Dublin"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/main/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# We can have all other environment variables (e.g. API keys) here
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLEMAPS_APIKEY", "")

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": os.path.join(BASE_DIR, "django_cache"),
    }
}